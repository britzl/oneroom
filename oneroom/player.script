local input = require "ludobits.m.input"
local broadcast = require "ludobits.m.broadcast"
local render_settings = require "render.settings"
local flow = require "ludobits.m.flow"


local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local COLLISION_RESPONSE = hash("collision_response")
local WALL = hash("wall")
local ENEMY = hash("enemy")
local AMMO = hash("ammo")
local WEAPON = hash("weapon")
local NEW_GAME = hash("new_game")

local IDLE = hash("idle")
local RUN = hash("run")

local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")
local FIRE = hash("fire")
local RELOAD = hash("reload")

local PLAYER_SPEED = 75

local ZOOM = render_settings.ZOOM


local function spawn_bullet(angle, speed)
	factory.create("game#bulletfactory", go.get_world_position(), angle, { speed = speed })
end



local WEAPONS = {
	{
		name = "AK-97",
		bullets_per_second = 10,
		magazine_size = 10,
		reload_time = 1.5,
		fire_bullet = function(angle)
			spawn_bullet(angle, 200)
		end
	},
	{
		name = "Four barrelled shotgun",
		bullets_per_second = 1,
		magazine_size = 4,
		reload_time = 1.5,
		fire_bullet = function(angle)
			for i=1,10 do
				spawn_bullet(angle * vmath.quat_rotation_z(math.rad(math.random(-20, 20))), 200)
			end
		end
	},
	--[[{
		name = "Minigun",
		bullets_per_second = 20,
		bullet_speed = 200,
		magazine_size = 100,
		reload_time = 3,
		fire_bullet = function(angle)
			spawn_bullet(angle, 200)
		end
	},--]]
}


local function update_text(text)
	label.set_text("hud#message", text)
end

local function update_weapon_text(self)
	--label.set_text("hud#weapon", self.weapon.name)
	if self.reloading then
		update_text(("%s - RELOADING"):format(self.weapon.name))
	elseif self.bullets_left == 0 then
		update_text(("%s - RELOAD!"):format(self.weapon.name))
	else
		update_text(("%s - %d / %d (%d)"):format(self.weapon.name, self.bullets_left, self.weapon.magazine_size, self.magazines))
	end
end

local function change_weapon(self, index)
	self.weapon = WEAPONS[index]
	self.weapon_angle = 0
	self.bullets_left = self.weapon.magazine_size
	self.magazines = 5
	self.bullet_interval = 1 / self.weapon.bullets_per_second
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	update_weapon_text(self)
end

function init(self)
	self.state = "idle"
	self.velocity = vmath.vector3()
	broadcast.register(NEW_GAME)
end


function final(self)
	flow.stop()
end

local function change_state(self, state)
	if state == RUN then
		if self.state ~= RUN then
			self.state = RUN
			msg.post("#sprite", "play_animation", { id = hash("player_run") })
		end
	elseif state == IDLE then
		if self.state ~= IDLE then
			self.state = IDLE
			msg.post("#sprite", "play_animation", { id = hash("player_idle") })
		end
	end
end 

function update(self, dt)
	flow.update(dt)
	
	local pos = go.get_position()
	pos = pos + self.velocity * dt

	if not input.is_pressed(LEFT) and not input.is_pressed(RIGHT) and not input.is_pressed(UP) and not input.is_pressed(DOWN) then
		change_state(IDLE)
	else
		change_state(RUN)
	end
	
	if input.is_pressed(FIRE) then
		local now = socket.gettime()
		if not self.last_bullet or (now - self.last_bullet) >= self.bullet_interval then
			if self.bullets_left > 0 then
				self.weapon.fire_bullet(self.weapon_angle)
				self.bullets_left = self.bullets_left - 1
				update_weapon_text(self)
				msg.post("sounds#fire", "play_sound")
			else
				print("reload")
				msg.post("sounds#noammo", "play_sound")
			end
			self.last_bullet = now
		end
	end
	go.set_position(pos)
	self.correction = vmath.vector3()

	if input.is_pressed(LEFT) then
		self.velocity.x = -PLAYER_SPEED
	elseif input.is_pressed(RIGHT) then
		self.velocity.x = PLAYER_SPEED
	else
		self.velocity.x = 0
	end
	if input.is_pressed(UP) then
		self.velocity.y = PLAYER_SPEED
	elseif input.is_pressed(DOWN) then
		self.velocity.y = -PLAYER_SPEED
	else
		self.velocity.y = 0
	end
end

function on_input(self, action_id, action)
	
	input.update(action_id, action)
	if not action_id then
		local pos = go.get_world_position()
		local angle = -math.atan2((action.x / ZOOM) - pos.x, (action.y / ZOOM) - pos.y)
		self.weapon_angle = vmath.quat_rotation_z(angle)
		--go.set_position(pos + vmath.rotate(self.weapon_angle, vmath.vector3(0, 20, 0)), "crosshair")
	elseif action_id == RELOAD and action.released then
		if self.magazines > 0 then
			if not self.reloading then
				self.reloading = true
				self.bullets_left = 0
				update_weapon_text(self)
				flow(function()
					flow.delay(self.weapon.reload_time)
					self.magazines = self.magazines - 1
					self.bullets_left = self.weapon.magazine_size
					self.reloading = false
					update_weapon_text(self)
				end)
			end
		end
	elseif action_id == hash("generate") and action.released then
		msg.post("level", "generate")
	end
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)

	if message_id == NEW_GAME then
		input.acquire()
		self.velocity = vmath.vector3()
		change_weapon(self, 1)
		update_weapon_text(self)
	end

	if message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			local proj = vmath.dot(self.correction, message.normal)
			local comp = (message.distance - proj) * message.normal
			self.correction = self.correction + comp
			go.set_position(go.get_position(id) + comp)
			proj = vmath.dot(self.velocity, message.normal)
			if proj < 0 then
				self.velocity = self.velocity - proj * message.normal
			end
		end
	elseif message_id == COLLISION_RESPONSE then
		if message.group == ENEMY then
			go.delete(message.other_id)
			input.release()
			broadcast.send("player_dead")
		elseif message.group == AMMO then
			go.delete(message.other_id)
			self.magazines = self.magazines + 1
			update_weapon_text(self)
			msg.post("sounds#pickup", "play_sound")
		elseif message.group == WEAPON then
			go.delete(message.other_id)
			change_weapon(self, math.random(1, #WEAPONS))
			msg.post("sounds#pickup", "play_sound")
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
