local flow = require "ludobits.m.flow"
local broadcast = require "ludobits.m.broadcast"
local timers = require "utils.timers"
local floodfill = require "utils.floodfill"
local pool = require "utils.pool"
local level = require "oneroom.level"
local settings = require "oneroom.settings"
local camera = require "orthographic.camera"

local SPAWN_AMMO = hash("spawn_ammo")
local SPAWN_WEAPON = hash("spawn_weapon")
local SPAWN_POWERUP = hash("spawn_powerup")
local SPAWN_SHELL = hash("spawn_shell")
local PICKUP_AMMO = hash("pickup_ammo")
local PICKUP_WEAPON = hash("pickup_weapon")
local PLAYER_DEAD = hash("player_dead")
local NEW_GAME = hash("new_game")
local DESTROY_WALL = hash("destroy_wall")


local TOGGLE_PROFILER = hash("toggle_profiler")
local TOGGLE_DEBUG = hash("toggle_debug")
local GENERATE = hash("generate")


local CAMERA_ID = hash("/camera")


local ENEMIES = {
	"#blobfactory",
	"#skullfactory",
}

local function update_text(text)
	label.set_text("hud#message", text)
end


local function spawn_enemy(self, position, type)
	factory.create(ENEMIES[math.random(1,#ENEMIES)], position)
end

local function spawn_powerup(self, position, type)
	factory.create("#powerupfactory", position, nil, { type = type })
end

local function spawn_ammo(self, position)
	spawn_powerup(self, position, hash("ammo"))
end

local function spawn_weapon(self, position)
	spawn_powerup(self, position, hash("weapon"))
end

local function spawn_shell(self, position)
	self.shells.spawn(position)
end

local function spawn_barrel(self, position)
	self.barrels.spawn(position)
end

local function floodfill_level(self, x, y)
	--local t = socket.gettime()
	floodfill.fill(x, y, self.level.layout)
	--print(socket.gettime() - t)
	--self.level.dumpcost()
end

local function generate_level(self, W, H)
	print(W, H)
	self.level = level.create(msg.url("level"), W, H, settings.TILE_SIZE)
	self.level.generate()
	
	self.player_spawn = self.level.create_spawn_position()
	go.set_position(self.player_spawn, "player/player")

	self.enemy_spawns = {}
	for i=1,4 do
		self.enemy_spawns[i] = self.level.create_spawn_position()
		go.set_position(self.enemy_spawns[i], "spawnpoint" .. i)
	end

	for i=1,math.random(1, 4) do
		local x, y, pos = self.level.random_position()
		spawn_barrel(self, pos)
	end

	floodfill_level(self, 1, 1)
end


function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.time())
	broadcast.register(PLAYER_DEAD)
	self.shells = pool.create("#shellfactory", 10)
	self.barrels = pool.create("#barrelfactory", 4)

	flow(function ()
		--[[update_text("Overrun Room")
		flow.delay(1)
		update_text("A game by Bjoern Ritzl")
		flow.delay(1)
		update_text("Created for Ludum Dare Jam #37")
		flow.delay(1)--]]
		while true do
			math.randomseed(socket.gettime())
			local width, height = window.get_size()
			local zoom = camera.get_zoom(CAMERA_ID)
			settings.MAP_WIDTH = width / zoom
			settings.MAP_HEIGHT = height / zoom
			generate_level(self, settings.MAP_WIDTH / settings.TILE_SIZE, settings.MAP_HEIGHT / settings.TILE_SIZE, settings.TILE_SIZE)
			msg.post("game:/player/player", "enable")
			broadcast.send(NEW_GAME)

			timers.every(2, function()
				spawn_enemy(self, self.enemy_spawns[math.random(1, #self.enemy_spawns)])
			end)
			timers.every(0.5, function()
				local x, y = self.level.vector3_to_xy(go.get_position("game:/player/player"))
				floodfill_level(self, x, y)
			end)
			flow.until_message(PLAYER_DEAD)
			self.shells.delete_all()
			self.barrels.delete_all()
			msg.post("game:/player/player", "disable")
			timers.stop()

			msg.post("level", "generate")
			flow.delay(0.1)
		end
	end)
end

function final(self)
	msg.post(".", "release_input_focus")
	flow.stop()
	timers.stop()
	broadcast.unregister(PLAYER_DEAD)
end

function update(self, dt)
	flow.update(dt)
end


function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == SPAWN_AMMO then
		spawn_ammo(self, message.position)
	elseif message_id == SPAWN_WEAPON then
		spawn_weapon(self, message.position)
	elseif message_id == SPAWN_POWERUP then
		spawn_powerup(self, message.position, message.type)
	elseif message_id == SPAWN_SHELL then
		spawn_shell(self, message.position)
	elseif message_id == DESTROY_WALL then
		local x, y = self.level.vector3_to_xy(message.pos)
		self.level.destroy(x, y)
	end
end

function on_input(self, action_id, action)
	if action.released then
		if action_id == TOGGLE_DEBUG then
			msg.post("@system:", "toggle_physics_debug")
		elseif action_id == TOGGLE_PROFILER then
			msg.post("@system:", "toggle_profile")
		elseif action_id == GENERATE then
			broadcast.send(PLAYER_DEAD)
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
