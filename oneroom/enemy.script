local broadcast = require "ludobits.m.broadcast"
local level = require "oneroom.level"

go.property("health", 3)
go.property("speed", 25)
go.property("rate_of_fire", 0)
go.property("min_fire_distance", 0)
go.property("max_fire_distance", 100)
go.property("min_follow_distance", 0)
go.property("max_follow_distance", 100)
go.property("min_retreat_distance", 0)
go.property("max_retreat_distance", 0)

local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local COLLISION_RESPONSE = hash("collision_response")
local WALL = hash("wall")
local BULLET = hash("bullet")
local EXPLOSION = hash("explosion")

local PLAYER_DEAD = hash("player_dead")


local NORTH = vmath.vector3(0, 1, 0)

function init(self)
	self.correction = vmath.vector3()
	self.time_until_next_bullet = 0
	broadcast.register("player_dead")
end

function final(self)
	broadcast.unregister("player_dead")
end

function update(self, dt)
	local player_pos = go.get_position("player/player")
	local my_pos = go.get_position()
	local distance_to_player = vmath.length(player_pos - my_pos)

	local x, y = level.current.vector3_to_xy(my_pos)
	local lowestcost = level.current.lowestcost(x, y)
	player_pos = level.current.xy_to_vector3(lowestcost.x, lowestcost.y)
	
	local direction = 0
	if distance_to_player >= self.min_follow_distance and distance_to_player <= self.max_follow_distance then
		direction = 1
	elseif distance_to_player >= self.min_retreat_distance and distance_to_player <= self.max_retreat_distance then
		direction = -1
	end
	direction = 1

	local target_angle = -math.atan2(player_pos.x - my_pos.x, player_pos.y - my_pos.y)
	local target_quat = vmath.quat_rotation_z(target_angle)
	go.set_position(my_pos + self.correction + vmath.rotate(target_quat, NORTH) * self.speed * dt * direction)
	
	self.correction = vmath.vector3()
	
	if self.rate_of_fire > 0 then
		if distance_to_player >= self.min_fire_distance and distance_to_player <= self.max_fire_distance then
			self.time_until_next_bullet = self.time_until_next_bullet - dt
			if self.time_until_next_bullet <= 0 then
				self.time_until_next_bullet = 1 / self.rate_of_fire
				msg.post(".", "fire")
			end 
		end
	end
end

local function take_damage(self, amount)
	self.health = math.max(0, self.health - amount)
	if self.health == 0 then
		msg.post(".", "death")
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			local proj = vmath.dot(self.correction, message.normal)
			local comp = (message.distance - proj) * message.normal
			self.correction = self.correction + comp
			go.set_position(go.get_position() + comp * 1)
			--pprint(message)
			--go.set_position(go.get_position() + (message.normal * message.distance * 1))
		end
	elseif message_id == COLLISION_RESPONSE then
		if message.group == BULLET then
			local damage = go.get(msg.url(nil, message.other_id, "bullet"), hash("damage")) or 1
			take_damage(self, damage)
		elseif message.group == EXPLOSION then
			take_damage(self, 3)
		end
	elseif message_id == PLAYER_DEAD then
		go.delete()
	end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
