local camera = require "orthographic.camera"

local DISPLAY_WIDTH = tonumber(sys.get_config("display.width"))
local DISPLAY_HEIGHT = tonumber(sys.get_config("display.height"))
local window_width = DISPLAY_WIDTH
local window_height = DISPLAY_HEIGHT


-- setup multiple fixed aspect ratio projections zoomed 2x, 4x, 6x, 8x and 10x times
local zoom_factor = 3
camera.add_projector(hash("FIXED_ZOOM_"..zoom_factor), function(camera_id, near_z, far_z)
	local projected_width = window_width / zoom_factor
	local projected_height = window_height / zoom_factor
	local xoffset = -(projected_width - DISPLAY_WIDTH) / 2
	local yoffset = -(projected_height - DISPLAY_HEIGHT) / 2
	return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near_z, far_z)
end)


function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	
	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
	
	self.view = vmath.matrix4()
	self.projection = vmath.matrix4()
end


function update(self)
	-- update window width/height for the fixed camera projection
	window_width = render.get_window_width()
	window_height = render.get_window_height()


	-- clear color 
	render.set_depth_mask(true)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})


	-- setup the viewport
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())


	-- draw world space using projection received from the camera in on_message
	render.set_view(self.view)
	render.set_projection(self.projection)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()


	-- draw gui in screen space using an orthographic projection
	render.set_view(vmath.matrix4())
	--render.set_view(self.view)
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width() / 3, 0, render.get_window_height() / 3, -1, 1))
	--render.set_projection(self.projection)
	
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
	
	render.set_depth_mask(false)
	render.draw_debug2d()
end


function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	end
end
